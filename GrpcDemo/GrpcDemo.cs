// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc_demo.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpcdemo {

  /// <summary>Holder for reflection information generated from grpc_demo.proto</summary>
  public static partial class GrpcDemoReflection {

    #region Descriptor
    /// <summary>File descriptor for grpc_demo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrpcDemoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9ncnBjX2RlbW8ucHJvdG8SCGdycGNkZW1vIsMBCgdSZXF1ZXN0Eg0KBU5v",
            "bmNlGAEgASgJEi8KB01hcERlbW8YAiADKAsyHi5ncnBjZGVtby5SZXF1ZXN0",
            "Lk1hcERlbW9FbnRyeRIUCgpEb3VibGVEZW1vGAMgASgBSAASEwoJRmxvYXRE",
            "ZW1vGAQgASgCSAAaQAoMTWFwRGVtb0VudHJ5EgsKA2tleRgBIAEoCRIfCgV2",
            "YWx1ZRgCIAEoCzIQLmdycGNkZW1vLk9iamVjdDoCOAFCCwoJT25lT2ZEZW1v",
            "Ik4KCFJlc3BvbnNlEg0KBU5vbmNlGAEgASgJEhEKCUJ5dGVzRGVtbxgCIAEo",
            "DBIgCghFbnVtRGVtbxgDIAEoDjIOLmdycGNkZW1vLkVudW0iHAoGT2JqZWN0",
            "EhIKClN0cmluZ0RlbW8YASABKAkiVwoPUmVwZWF0ZWRSZXF1ZXN0Eg0KBU5v",
            "bmNlGAEgASgJEg8KB0ludERlbW8YAiADKAUSJAoKT2JqZWN0RGVtbxgDIAMo",
            "CzIQLmdycGNkZW1vLk9iamVjdCI1ChBSZXBlYXRlZFJlc3BvbnNlEg0KBU5v",
            "bmNlGAEgASgJEhIKClN0cmluZ0RlbW8YAiADKAkiMQoNU3RyZWFtUmVxdWVz",
            "dBINCgVOb25jZRgBIAEoCRIRCglGbG9hdERlbW8YAiABKAIiQQoOU3RyZWFt",
            "UmVzcG9uc2USDQoFTm9uY2UYASABKAkSIAoIRW51bURlbW8YAiABKA4yDi5n",
            "cnBjZGVtby5FbnVtKhwKBEVudW0SCQoFREVNTzEQABIJCgVERU1PMhABMssB",
            "CghHcnBjRGVtbxIvCgREZW1vEhEuZ3JwY2RlbW8uUmVxdWVzdBoSLmdycGNk",
            "ZW1vLlJlc3BvbnNlIgASRwoMUmVwZWF0ZWREZW1vEhkuZ3JwY2RlbW8uUmVw",
            "ZWF0ZWRSZXF1ZXN0GhouZ3JwY2RlbW8uUmVwZWF0ZWRSZXNwb25zZSIAEkUK",
            "ClN0cmVhbURlbW8SFy5ncnBjZGVtby5TdHJlYW1SZXF1ZXN0GhguZ3JwY2Rl",
            "bW8uU3RyZWFtUmVzcG9uc2UiACgBMAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Grpcdemo.Enum), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcdemo.Request), global::Grpcdemo.Request.Parser, new[]{ "Nonce", "MapDemo", "DoubleDemo", "FloatDemo" }, new[]{ "OneOfDemo" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcdemo.Response), global::Grpcdemo.Response.Parser, new[]{ "Nonce", "BytesDemo", "EnumDemo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcdemo.Object), global::Grpcdemo.Object.Parser, new[]{ "StringDemo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcdemo.RepeatedRequest), global::Grpcdemo.RepeatedRequest.Parser, new[]{ "Nonce", "IntDemo", "ObjectDemo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcdemo.RepeatedResponse), global::Grpcdemo.RepeatedResponse.Parser, new[]{ "Nonce", "StringDemo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcdemo.StreamRequest), global::Grpcdemo.StreamRequest.Parser, new[]{ "Nonce", "FloatDemo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcdemo.StreamResponse), global::Grpcdemo.StreamResponse.Parser, new[]{ "Nonce", "EnumDemo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Enum {
    [pbr::OriginalName("DEMO1")] Demo1 = 0,
    [pbr::OriginalName("DEMO2")] Demo2 = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcdemo.GrpcDemoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      nonce_ = other.nonce_;
      mapDemo_ = other.mapDemo_.Clone();
      switch (other.OneOfDemoCase) {
        case OneOfDemoOneofCase.DoubleDemo:
          DoubleDemo = other.DoubleDemo;
          break;
        case OneOfDemoOneofCase.FloatDemo:
          FloatDemo = other.FloatDemo;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "Nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private string nonce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nonce {
      get { return nonce_; }
      set {
        nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MapDemo" field.</summary>
    public const int MapDemoFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Grpcdemo.Object>.Codec _map_mapDemo_codec
        = new pbc::MapField<string, global::Grpcdemo.Object>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Grpcdemo.Object.Parser), 18);
    private readonly pbc::MapField<string, global::Grpcdemo.Object> mapDemo_ = new pbc::MapField<string, global::Grpcdemo.Object>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Grpcdemo.Object> MapDemo {
      get { return mapDemo_; }
    }

    /// <summary>Field number for the "DoubleDemo" field.</summary>
    public const int DoubleDemoFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleDemo {
      get { return oneOfDemoCase_ == OneOfDemoOneofCase.DoubleDemo ? (double) oneOfDemo_ : 0D; }
      set {
        oneOfDemo_ = value;
        oneOfDemoCase_ = OneOfDemoOneofCase.DoubleDemo;
      }
    }

    /// <summary>Field number for the "FloatDemo" field.</summary>
    public const int FloatDemoFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatDemo {
      get { return oneOfDemoCase_ == OneOfDemoOneofCase.FloatDemo ? (float) oneOfDemo_ : 0F; }
      set {
        oneOfDemo_ = value;
        oneOfDemoCase_ = OneOfDemoOneofCase.FloatDemo;
      }
    }

    private object oneOfDemo_;
    /// <summary>Enum of possible cases for the "OneOfDemo" oneof.</summary>
    public enum OneOfDemoOneofCase {
      None = 0,
      DoubleDemo = 3,
      FloatDemo = 4,
    }
    private OneOfDemoOneofCase oneOfDemoCase_ = OneOfDemoOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneOfDemoOneofCase OneOfDemoCase {
      get { return oneOfDemoCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneOfDemo() {
      oneOfDemoCase_ = OneOfDemoOneofCase.None;
      oneOfDemo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if (!MapDemo.Equals(other.MapDemo)) return false;
      if (DoubleDemo != other.DoubleDemo) return false;
      if (FloatDemo != other.FloatDemo) return false;
      if (OneOfDemoCase != other.OneOfDemoCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
      hash ^= MapDemo.GetHashCode();
      if (oneOfDemoCase_ == OneOfDemoOneofCase.DoubleDemo) hash ^= DoubleDemo.GetHashCode();
      if (oneOfDemoCase_ == OneOfDemoOneofCase.FloatDemo) hash ^= FloatDemo.GetHashCode();
      hash ^= (int) oneOfDemoCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nonce.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nonce);
      }
      mapDemo_.WriteTo(output, _map_mapDemo_codec);
      if (oneOfDemoCase_ == OneOfDemoOneofCase.DoubleDemo) {
        output.WriteRawTag(25);
        output.WriteDouble(DoubleDemo);
      }
      if (oneOfDemoCase_ == OneOfDemoOneofCase.FloatDemo) {
        output.WriteRawTag(37);
        output.WriteFloat(FloatDemo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nonce);
      }
      size += mapDemo_.CalculateSize(_map_mapDemo_codec);
      if (oneOfDemoCase_ == OneOfDemoOneofCase.DoubleDemo) {
        size += 1 + 8;
      }
      if (oneOfDemoCase_ == OneOfDemoOneofCase.FloatDemo) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Nonce.Length != 0) {
        Nonce = other.Nonce;
      }
      mapDemo_.Add(other.mapDemo_);
      switch (other.OneOfDemoCase) {
        case OneOfDemoOneofCase.DoubleDemo:
          DoubleDemo = other.DoubleDemo;
          break;
        case OneOfDemoOneofCase.FloatDemo:
          FloatDemo = other.FloatDemo;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Nonce = input.ReadString();
            break;
          }
          case 18: {
            mapDemo_.AddEntriesFrom(input, _map_mapDemo_codec);
            break;
          }
          case 25: {
            DoubleDemo = input.ReadDouble();
            break;
          }
          case 37: {
            FloatDemo = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcdemo.GrpcDemoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      nonce_ = other.nonce_;
      bytesDemo_ = other.bytesDemo_;
      enumDemo_ = other.enumDemo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "Nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private string nonce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nonce {
      get { return nonce_; }
      set {
        nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BytesDemo" field.</summary>
    public const int BytesDemoFieldNumber = 2;
    private pb::ByteString bytesDemo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesDemo {
      get { return bytesDemo_; }
      set {
        bytesDemo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EnumDemo" field.</summary>
    public const int EnumDemoFieldNumber = 3;
    private global::Grpcdemo.Enum enumDemo_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcdemo.Enum EnumDemo {
      get { return enumDemo_; }
      set {
        enumDemo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if (BytesDemo != other.BytesDemo) return false;
      if (EnumDemo != other.EnumDemo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
      if (BytesDemo.Length != 0) hash ^= BytesDemo.GetHashCode();
      if (EnumDemo != 0) hash ^= EnumDemo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nonce.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nonce);
      }
      if (BytesDemo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BytesDemo);
      }
      if (EnumDemo != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EnumDemo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nonce);
      }
      if (BytesDemo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesDemo);
      }
      if (EnumDemo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnumDemo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Nonce.Length != 0) {
        Nonce = other.Nonce;
      }
      if (other.BytesDemo.Length != 0) {
        BytesDemo = other.BytesDemo;
      }
      if (other.EnumDemo != 0) {
        EnumDemo = other.EnumDemo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Nonce = input.ReadString();
            break;
          }
          case 18: {
            BytesDemo = input.ReadBytes();
            break;
          }
          case 24: {
            enumDemo_ = (global::Grpcdemo.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Object : pb::IMessage<Object> {
    private static readonly pb::MessageParser<Object> _parser = new pb::MessageParser<Object>(() => new Object());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Object> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcdemo.GrpcDemoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object(Object other) : this() {
      stringDemo_ = other.stringDemo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object Clone() {
      return new Object(this);
    }

    /// <summary>Field number for the "StringDemo" field.</summary>
    public const int StringDemoFieldNumber = 1;
    private string stringDemo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringDemo {
      get { return stringDemo_; }
      set {
        stringDemo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Object);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Object other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StringDemo != other.StringDemo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StringDemo.Length != 0) hash ^= StringDemo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StringDemo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StringDemo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StringDemo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringDemo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Object other) {
      if (other == null) {
        return;
      }
      if (other.StringDemo.Length != 0) {
        StringDemo = other.StringDemo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StringDemo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RepeatedRequest : pb::IMessage<RepeatedRequest> {
    private static readonly pb::MessageParser<RepeatedRequest> _parser = new pb::MessageParser<RepeatedRequest>(() => new RepeatedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepeatedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcdemo.GrpcDemoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedRequest(RepeatedRequest other) : this() {
      nonce_ = other.nonce_;
      intDemo_ = other.intDemo_.Clone();
      objectDemo_ = other.objectDemo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedRequest Clone() {
      return new RepeatedRequest(this);
    }

    /// <summary>Field number for the "Nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private string nonce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nonce {
      get { return nonce_; }
      set {
        nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IntDemo" field.</summary>
    public const int IntDemoFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_intDemo_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> intDemo_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IntDemo {
      get { return intDemo_; }
    }

    /// <summary>Field number for the "ObjectDemo" field.</summary>
    public const int ObjectDemoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Grpcdemo.Object> _repeated_objectDemo_codec
        = pb::FieldCodec.ForMessage(26, global::Grpcdemo.Object.Parser);
    private readonly pbc::RepeatedField<global::Grpcdemo.Object> objectDemo_ = new pbc::RepeatedField<global::Grpcdemo.Object>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpcdemo.Object> ObjectDemo {
      get { return objectDemo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepeatedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepeatedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if(!intDemo_.Equals(other.intDemo_)) return false;
      if(!objectDemo_.Equals(other.objectDemo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
      hash ^= intDemo_.GetHashCode();
      hash ^= objectDemo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nonce.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nonce);
      }
      intDemo_.WriteTo(output, _repeated_intDemo_codec);
      objectDemo_.WriteTo(output, _repeated_objectDemo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nonce);
      }
      size += intDemo_.CalculateSize(_repeated_intDemo_codec);
      size += objectDemo_.CalculateSize(_repeated_objectDemo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepeatedRequest other) {
      if (other == null) {
        return;
      }
      if (other.Nonce.Length != 0) {
        Nonce = other.Nonce;
      }
      intDemo_.Add(other.intDemo_);
      objectDemo_.Add(other.objectDemo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Nonce = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            intDemo_.AddEntriesFrom(input, _repeated_intDemo_codec);
            break;
          }
          case 26: {
            objectDemo_.AddEntriesFrom(input, _repeated_objectDemo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RepeatedResponse : pb::IMessage<RepeatedResponse> {
    private static readonly pb::MessageParser<RepeatedResponse> _parser = new pb::MessageParser<RepeatedResponse>(() => new RepeatedResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepeatedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcdemo.GrpcDemoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedResponse(RepeatedResponse other) : this() {
      nonce_ = other.nonce_;
      stringDemo_ = other.stringDemo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedResponse Clone() {
      return new RepeatedResponse(this);
    }

    /// <summary>Field number for the "Nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private string nonce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nonce {
      get { return nonce_; }
      set {
        nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StringDemo" field.</summary>
    public const int StringDemoFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_stringDemo_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> stringDemo_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StringDemo {
      get { return stringDemo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepeatedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepeatedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if(!stringDemo_.Equals(other.stringDemo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
      hash ^= stringDemo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nonce.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nonce);
      }
      stringDemo_.WriteTo(output, _repeated_stringDemo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nonce);
      }
      size += stringDemo_.CalculateSize(_repeated_stringDemo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepeatedResponse other) {
      if (other == null) {
        return;
      }
      if (other.Nonce.Length != 0) {
        Nonce = other.Nonce;
      }
      stringDemo_.Add(other.stringDemo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Nonce = input.ReadString();
            break;
          }
          case 18: {
            stringDemo_.AddEntriesFrom(input, _repeated_stringDemo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamRequest : pb::IMessage<StreamRequest> {
    private static readonly pb::MessageParser<StreamRequest> _parser = new pb::MessageParser<StreamRequest>(() => new StreamRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcdemo.GrpcDemoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamRequest(StreamRequest other) : this() {
      nonce_ = other.nonce_;
      floatDemo_ = other.floatDemo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamRequest Clone() {
      return new StreamRequest(this);
    }

    /// <summary>Field number for the "Nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private string nonce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nonce {
      get { return nonce_; }
      set {
        nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FloatDemo" field.</summary>
    public const int FloatDemoFieldNumber = 2;
    private float floatDemo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatDemo {
      get { return floatDemo_; }
      set {
        floatDemo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if (FloatDemo != other.FloatDemo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
      if (FloatDemo != 0F) hash ^= FloatDemo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nonce.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nonce);
      }
      if (FloatDemo != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(FloatDemo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nonce);
      }
      if (FloatDemo != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamRequest other) {
      if (other == null) {
        return;
      }
      if (other.Nonce.Length != 0) {
        Nonce = other.Nonce;
      }
      if (other.FloatDemo != 0F) {
        FloatDemo = other.FloatDemo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Nonce = input.ReadString();
            break;
          }
          case 21: {
            FloatDemo = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamResponse : pb::IMessage<StreamResponse> {
    private static readonly pb::MessageParser<StreamResponse> _parser = new pb::MessageParser<StreamResponse>(() => new StreamResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcdemo.GrpcDemoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamResponse(StreamResponse other) : this() {
      nonce_ = other.nonce_;
      enumDemo_ = other.enumDemo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamResponse Clone() {
      return new StreamResponse(this);
    }

    /// <summary>Field number for the "Nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private string nonce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nonce {
      get { return nonce_; }
      set {
        nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EnumDemo" field.</summary>
    public const int EnumDemoFieldNumber = 2;
    private global::Grpcdemo.Enum enumDemo_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcdemo.Enum EnumDemo {
      get { return enumDemo_; }
      set {
        enumDemo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if (EnumDemo != other.EnumDemo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
      if (EnumDemo != 0) hash ^= EnumDemo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nonce.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nonce);
      }
      if (EnumDemo != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EnumDemo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nonce);
      }
      if (EnumDemo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnumDemo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamResponse other) {
      if (other == null) {
        return;
      }
      if (other.Nonce.Length != 0) {
        Nonce = other.Nonce;
      }
      if (other.EnumDemo != 0) {
        EnumDemo = other.EnumDemo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Nonce = input.ReadString();
            break;
          }
          case 16: {
            enumDemo_ = (global::Grpcdemo.Enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

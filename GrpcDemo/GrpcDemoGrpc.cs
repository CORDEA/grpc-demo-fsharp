// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc_demo.proto
// Original file comments:
// Copyright 2016 Yoshihiro Tanaka
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Grpcdemo {
  public static class GrpcDemo
  {
    static readonly string __ServiceName = "grpcdemo.GrpcDemo";

    static readonly Marshaller<global::Grpcdemo.Request> __Marshaller_Request = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcdemo.Request.Parser.ParseFrom);
    static readonly Marshaller<global::Grpcdemo.Response> __Marshaller_Response = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcdemo.Response.Parser.ParseFrom);
    static readonly Marshaller<global::Grpcdemo.RepeatedRequest> __Marshaller_RepeatedRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcdemo.RepeatedRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Grpcdemo.RepeatedResponse> __Marshaller_RepeatedResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcdemo.RepeatedResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Grpcdemo.StreamRequest> __Marshaller_StreamRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcdemo.StreamRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Grpcdemo.StreamResponse> __Marshaller_StreamResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcdemo.StreamResponse.Parser.ParseFrom);

    static readonly Method<global::Grpcdemo.Request, global::Grpcdemo.Response> __Method_Demo = new Method<global::Grpcdemo.Request, global::Grpcdemo.Response>(
        MethodType.Unary,
        __ServiceName,
        "Demo",
        __Marshaller_Request,
        __Marshaller_Response);

    static readonly Method<global::Grpcdemo.RepeatedRequest, global::Grpcdemo.RepeatedResponse> __Method_RepeatedDemo = new Method<global::Grpcdemo.RepeatedRequest, global::Grpcdemo.RepeatedResponse>(
        MethodType.Unary,
        __ServiceName,
        "RepeatedDemo",
        __Marshaller_RepeatedRequest,
        __Marshaller_RepeatedResponse);

    static readonly Method<global::Grpcdemo.StreamRequest, global::Grpcdemo.StreamResponse> __Method_StreamDemo = new Method<global::Grpcdemo.StreamRequest, global::Grpcdemo.StreamResponse>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "StreamDemo",
        __Marshaller_StreamRequest,
        __Marshaller_StreamResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpcdemo.GrpcDemoReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GrpcDemo</summary>
    public abstract class GrpcDemoBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Grpcdemo.Response> Demo(global::Grpcdemo.Request request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpcdemo.RepeatedResponse> RepeatedDemo(global::Grpcdemo.RepeatedRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task StreamDemo(IAsyncStreamReader<global::Grpcdemo.StreamRequest> requestStream, IServerStreamWriter<global::Grpcdemo.StreamResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GrpcDemo</summary>
    public class GrpcDemoClient : ClientBase<GrpcDemoClient>
    {
      /// <summary>Creates a new client for GrpcDemo</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GrpcDemoClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GrpcDemo that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GrpcDemoClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GrpcDemoClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GrpcDemoClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Grpcdemo.Response Demo(global::Grpcdemo.Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Demo(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpcdemo.Response Demo(global::Grpcdemo.Request request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Demo, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Grpcdemo.Response> DemoAsync(global::Grpcdemo.Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DemoAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Grpcdemo.Response> DemoAsync(global::Grpcdemo.Request request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Demo, null, options, request);
      }
      public virtual global::Grpcdemo.RepeatedResponse RepeatedDemo(global::Grpcdemo.RepeatedRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RepeatedDemo(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpcdemo.RepeatedResponse RepeatedDemo(global::Grpcdemo.RepeatedRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RepeatedDemo, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Grpcdemo.RepeatedResponse> RepeatedDemoAsync(global::Grpcdemo.RepeatedRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RepeatedDemoAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Grpcdemo.RepeatedResponse> RepeatedDemoAsync(global::Grpcdemo.RepeatedRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RepeatedDemo, null, options, request);
      }
      public virtual AsyncDuplexStreamingCall<global::Grpcdemo.StreamRequest, global::Grpcdemo.StreamResponse> StreamDemo(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StreamDemo(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncDuplexStreamingCall<global::Grpcdemo.StreamRequest, global::Grpcdemo.StreamResponse> StreamDemo(CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamDemo, null, options);
      }
      protected override GrpcDemoClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GrpcDemoClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(GrpcDemoBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Demo, serviceImpl.Demo)
          .AddMethod(__Method_RepeatedDemo, serviceImpl.RepeatedDemo)
          .AddMethod(__Method_StreamDemo, serviceImpl.StreamDemo).Build();
    }

  }
}
#endregion
